"""
üå¥ AGENTE DE PLANIFICACI√ìN DE VACACIONES
Sistema inteligente para planificar vacaciones perfectas
"""

import os
import requests
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from dotenv import load_dotenv
import random

from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.messages import SystemMessage
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver

# Cargar variables de entorno
load_dotenv()

# ============================================================================
# BASE DE DATOS DE VIAJEROS
# ============================================================================

class ViajerosDB:
    """Base de datos en memoria para gestionar viajeros"""
    def __init__(self):
        self.viajeros: List[Dict[str, Any]] = []
        self.contador = 1
    
    def agregar(self, nombre: str, edad: int, tipo: str = "adulto") -> Dict:
        viajero = {
            "id": self.contador,
            "nombre": nombre,
            "edad": edad,
            "tipo": tipo,  # adulto, ni√±o, beb√©
            "fecha_registro": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        self.viajeros.append(viajero)
        self.contador += 1
        return viajero
    
    def listar(self) -> List[Dict]:
        return self.viajeros
    
    def limpiar(self):
        self.viajeros = []
        self.contador = 1
    
    def contar_por_tipo(self) -> Dict[str, int]:
        conteo = {"adulto": 0, "ni√±o": 0, "beb√©": 0}
        for v in self.viajeros:
            conteo[v["tipo"]] = conteo.get(v["tipo"], 0) + 1
        return conteo

# Instancia global
viajeros_db = ViajerosDB()

# ============================================================================
# HERRAMIENTA 1: GESTI√ìN DE VIAJEROS
# ============================================================================

class ViajeroInput(BaseModel):
    """Input para gesti√≥n de viajeros"""
    accion: str = Field(description="Acci√≥n: 'agregar', 'listar', 'limpiar'")
    nombre: Optional[str] = Field(default=None, description="Nombre del viajero")
    edad: Optional[int] = Field(default=None, description="Edad del viajero")

@tool("gestionar_viajeros", args_schema=ViajeroInput)
def gestionar_viajeros(
    accion: str,
    nombre: Optional[str] = None,
    edad: Optional[int] = None
) -> str:
    """
    Gestiona la lista de viajeros para el viaje.
    Clasifica autom√°ticamente: adulto (18+), ni√±o (2-17), beb√© (0-1)
    """
    
    if accion == "agregar":
        if not nombre or edad is None:
            return "‚ùå Necesito nombre y edad del viajero"
        
        # Clasificar por edad
        if edad >= 18:
            tipo = "adulto"
        elif edad >= 2:
            tipo = "ni√±o"
        else:
            tipo = "beb√©"
        
        viajero = viajeros_db.agregar(nombre, edad, tipo)
        return f"‚úÖ Viajero agregado: {nombre} ({edad} a√±os) - Categor√≠a: {tipo}"
    
    elif accion == "listar":
        viajeros = viajeros_db.listar()
        if not viajeros:
            return "üë• No hay viajeros registrados a√∫n"
        
        conteo = viajeros_db.contar_por_tipo()
        resultado = f"üë• Viajeros registrados ({len(viajeros)} total):\n"
        resultado += f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Adultos: {conteo['adulto']} | Ni√±os: {conteo['ni√±o']} | Beb√©s: {conteo['beb√©']}\n\n"
        
        for v in viajeros:
            emoji = "üë®" if v["tipo"] == "adulto" else "üë∂" if v["tipo"] == "beb√©" else "üßí"
            resultado += f"{emoji} {v['nombre']} - {v['edad']} a√±os ({v['tipo']})\n"
        return resultado
    
    elif accion == "limpiar":
        viajeros_db.limpiar()
        return "üóëÔ∏è Lista de viajeros limpiada"
    
    else:
        return f"‚ùå Acci√≥n no v√°lida: {accion}"

# ============================================================================
# HERRAMIENTA 2: B√öSQUEDA DE VUELOS
# ============================================================================

def obtener_codigo_iata(ciudad: str) -> Optional[str]:
    """Obtiene el c√≥digo IATA de una ciudad"""
    codigos_comunes = {
        # Sudam√©rica
        "lima": "LIM", "cusco": "CUZ", "cuzco": "CUZ", "arequipa": "AQP",
        "buenos aires": "BUE", "santiago": "SCL", 
        "bogota": "BOG", "bogot√°": "BOG",  # Con y sin acento
        "medellin": "MDE", "medell√≠n": "MDE",
        "cartagena": "CTG", 
        "quito": "UIO", 
        "guayaquil": "GYE", 
        "rio de janeiro": "GIG", "r√≠o de janeiro": "GIG",
        "sao paulo": "GRU", "s√£o paulo": "GRU",
        "brasilia": "BSB", "bras√≠lia": "BSB",
        "montevideo": "MVD", 
        "asuncion": "ASU", "asunci√≥n": "ASU",
        "la paz": "LPB", "caracas": "CCS",
        
        # Norteam√©rica
        "new york": "NYC", "nueva york": "NYC", "miami": "MIA",
        "los angeles": "LAX", "chicago": "CHI", "houston": "HOU",
        "san francisco": "SFO", "washington": "WAS", "boston": "BOS",
        "las vegas": "LAS", "orlando": "MCO", "seattle": "SEA",
        "mexico": "MEX", "cancun": "CUN", "guadalajara": "GDL",
        "toronto": "YYZ", "vancouver": "YVR", "montreal": "YUL",
        
        # Europa
        "madrid": "MAD", "barcelona": "BCN", "sevilla": "SVQ",
        "paris": "PAR", "par√≠s": "PAR",
        "londres": "LON", "london": "LON",
        "roma": "ROM", 
        "milan": "MIL", "mil√°n": "MIL",
        "berlin": "BER", "berl√≠n": "BER",
        "amsterdam": "AMS", "√°msterdam": "AMS",
        "bruselas": "BRU", 
        "viena": "VIE", 
        "praga": "PRG", 
        "lisboa": "LIS", 
        "dublin": "DUB", "dubl√≠n": "DUB",
        "atenas": "ATH", 
        "estambul": "IST", "istanbul": "IST",
        "moscu": "MOW", "mosc√∫": "MOW",
        "zurich": "ZRH", "z√∫rich": "ZRH",
        
        # Asia
        "tokyo": "TYO", "tokio": "TYO", "toquio": "TYO",
        "bangkok": "BKK", 
        "singapur": "SIN", "singapore": "SIN",
        "hong kong": "HKG", 
        "dubai": "DXB", "dub√°i": "DXB",
        "delhi": "DEL", 
        "mumbai": "BOM", "bombay": "BOM",
        "shanghai": "SHA", "shangh√°i": "SHA",
        "beijing": "BJS", "pek√≠n": "BJS", "pekin": "BJS",
        "seul": "SEL", "seoul": "SEL",
        "taipei": "TPE", 
        "manila": "MNL",
        
        # Ocean√≠a
        "sydney": "SYD", "melbourne": "MEL", "auckland": "AKL",
    }
    return codigos_comunes.get(ciudad.lower())

def buscar_vuelos_amadeus(origen_iata: str, destino_iata: str, fecha_ida: str, 
                          fecha_vuelta: Optional[str], num_adultos: int) -> Optional[Dict]:
    """Busca vuelos usando Amadeus API"""
    try:
        # Obtener credenciales
        amadeus_key = os.getenv("AMADEUS_API_KEY")
        amadeus_secret = os.getenv("AMADEUS_API_SECRET")
        
        if not amadeus_key or not amadeus_secret:
            # print("Amadeus API no configurada")
            return None
        
        # 1. Obtener token de acceso
        auth_url = "https://test.api.amadeus.com/v1/security/oauth2/token"
        auth_data = {
            "grant_type": "client_credentials",
            "client_id": amadeus_key,
            "client_secret": amadeus_secret
        }
        
        auth_response = requests.post(auth_url, data=auth_data, timeout=10)
        if auth_response.status_code != 200:
            # print(f"Error auth Amadeus: {auth_response.status_code}")
            # print(f"Respuesta: {auth_response.text}")
            return None
        
        token = auth_response.json()["access_token"]
        
        # 2. Buscar vuelos
        search_url = "https://test.api.amadeus.com/v2/shopping/flight-offers"
        headers = {"Authorization": f"Bearer {token}"}
        
        params = {
            "originLocationCode": origen_iata,
            "destinationLocationCode": destino_iata,
            "departureDate": fecha_ida,
            "adults": num_adultos,
            "max": 5
        }
        
        if fecha_vuelta:
            params["returnDate"] = fecha_vuelta
        
        # print(f"Buscando vuelos: {origen_iata}->{destino_iata}, {fecha_ida}, {num_adultos} adultos")
        search_response = requests.get(search_url, headers=headers, params=params, timeout=15)
        
        if search_response.status_code == 200:
            data = search_response.json()
            # print(f"Encontrados {len(data.get('data', []))} vuelos")
            return data
        else:
            # print(f"Error busqueda Amadeus: {search_response.status_code}")
            # print(f"Respuesta: {search_response.text}")
            pass
        
        return None
        
    except Exception as e:
        # print(f"Error en Amadeus API: {e}")
        # import traceback
        # traceback.print_exc()
        return None

class VueloInput(BaseModel):
    """Input para b√∫squeda de vuelos"""
    origen: str = Field(description="Ciudad de origen (ej: 'Lima', 'Madrid')")
    destino: str = Field(description="Ciudad de destino")
    fecha_ida: str = Field(description="Fecha de ida (YYYY-MM-DD)")
    fecha_vuelta: Optional[str] = Field(default=None, description="Fecha de vuelta (YYYY-MM-DD)")

@tool("buscar_vuelos", args_schema=VueloInput)
def buscar_vuelos(
    origen: str,
    destino: str,
    fecha_ida: str,
    fecha_vuelta: Optional[str] = None
) -> str:
    """
    Busca vuelos disponibles entre dos ciudades usando Amadeus API.
    Si la API no est√° disponible, usa datos simulados realistas.
    Retorna opciones con precios reales o aproximados por persona.
    """
    try:
        # Validar que las fechas sean futuras
        from datetime import datetime, timedelta
        try:
            fecha_ida_obj = datetime.strptime(fecha_ida, "%Y-%m-%d")
            hoy = datetime.now()
            
            if fecha_ida_obj < hoy:
                dias_diff = (hoy - fecha_ida_obj).days
                fecha_sugerida = (hoy + timedelta(days=30)).strftime("%Y-%m-%d")
                return f"‚ùå ERROR: La fecha {fecha_ida} ya pas√≥ (hace {dias_diff} d√≠as).\n\nüí° Sugerencia: Usa fechas futuras, por ejemplo: {fecha_sugerida}\n\nFormato correcto: YYYY-MM-DD"
        except ValueError:
            return f"‚ùå ERROR: Formato de fecha incorrecto: {fecha_ida}\n\nüí° Usa formato: YYYY-MM-DD (ejemplo: 2025-12-15)"
        
        # Obtener c√≥digos IATA
        origen_iata = obtener_codigo_iata(origen)
        destino_iata = obtener_codigo_iata(destino)
        
        if not origen_iata or not destino_iata:
            return f"‚ùå No se encontr√≥ c√≥digo IATA para {origen if not origen_iata else destino}. Ciudades disponibles: Lima, Madrid, Barcelona, Par√≠s, Londres, New York, Miami, Canc√∫n, etc."
        
        # Obtener informaci√≥n de viajeros
        conteo = viajeros_db.contar_por_tipo()
        num_adultos = max(conteo.get("adulto", 0), 1)
        num_ninos = conteo.get("ni√±o", 0)
        num_bebes = conteo.get("beb√©", 0)
        num_viajeros = len(viajeros_db.viajeros) or 1
        
        # Intentar usar Amadeus API
        datos_amadeus = buscar_vuelos_amadeus(origen_iata, destino_iata, fecha_ida, 
                                               fecha_vuelta, num_adultos)
        
        tipo_viaje = "ida y vuelta" if fecha_vuelta else "solo ida"
        
        if datos_amadeus and "data" in datos_amadeus and len(datos_amadeus["data"]) > 0:
            # USAR DATOS REALES DE AMADEUS
            resultado = f"‚úàÔ∏è VUELOS REALES - {tipo_viaje.upper()}\n"
            resultado += f"üìç {origen} ({origen_iata}) ‚Üí {destino} ({destino_iata})\n"
            resultado += f"üìÖ Ida: {fecha_ida}"
            if fecha_vuelta:
                resultado += f" | Vuelta: {fecha_vuelta}"
            resultado += f"\nüë• Viajeros: {num_viajeros} persona(s)\n"
            resultado += f"   ({num_adultos} adulto(s), {num_ninos} ni√±o(s), {num_bebes} beb√©(s))\n\n"
            
            vuelos = datos_amadeus["data"][:3]  # Top 3 opciones
            
            for i, vuelo in enumerate(vuelos):
                precio_base = float(vuelo["price"]["total"])
                moneda = vuelo["price"]["currency"]
                
                # Calcular para todo el grupo
                precio_ninos = precio_base * 0.75 * num_ninos
                precio_bebes = precio_base * 0.15 * num_bebes
                total_grupo = (precio_base * num_adultos) + precio_ninos + precio_bebes
                
                # Informaci√≥n del vuelo
                segmentos = vuelo["itineraries"][0]["segments"]
                primer_segmento = segmentos[0]
                ultimo_segmento = segmentos[-1]
                
                aerolinea_code = primer_segmento["carrierCode"]
                duracion = vuelo["itineraries"][0]["duration"]
                escalas = len(segmentos) - 1
                
                hora_salida = primer_segmento["departure"]["at"].split("T")[1][:5]
                hora_llegada = ultimo_segmento["arrival"]["at"].split("T")[1][:5]
                
                resultado += f"üõ´ Opci√≥n {i+1}: {aerolinea_code}\n"
                resultado += f"   ‚è∞ Salida: {hora_salida} | Llegada: {hora_llegada}\n"
                resultado += f"   üîÑ Escalas: {escalas} | Duraci√≥n: {duracion[2:]}\n"
                resultado += f"   üí∞ Precio por adulto: {precio_base:.2f} {moneda}\n"
                if num_ninos > 0:
                    resultado += f"   üë∂ Ni√±os ({num_ninos}): {precio_ninos:.2f} {moneda}\n"
                if num_bebes > 0:
                    resultado += f"   üçº Beb√©s ({num_bebes}): {precio_bebes:.2f} {moneda}\n"
                resultado += f"   üíµ TOTAL GRUPO: {total_grupo:.2f} {moneda}\n\n"
            
            resultado += "‚úÖ Precios reales obtenidos de Amadeus API\n\n"
            
            # Agregar links de compra
            resultado += "üîó ENLACES PARA COMPRAR:\n"
            resultado += f"üåê Google Flights: https://www.google.com/flights?hl=es#flt={origen_iata}.{destino_iata}.{fecha_ida}"
            if fecha_vuelta:
                resultado += f"*{destino_iata}.{origen_iata}.{fecha_vuelta}"
            resultado += f";c:EUR;e:1;sd:1;t:f\n"
            
            resultado += f"üåê Skyscanner: https://www.skyscanner.com/transport/flights/{origen_iata}/{destino_iata}/{fecha_ida.replace('-', '')}"
            if fecha_vuelta:
                resultado += f"/{fecha_vuelta.replace('-', '')}"
            resultado += f"/?adultsv1={num_adultos}"
            if num_ninos > 0:
                resultado += f"&childrenv1={num_ninos}"
            resultado += "\n"
            
            resultado += f"üåê Kayak: https://www.kayak.com/flights/{origen_iata}-{destino_iata}/{fecha_ida}"
            if fecha_vuelta:
                resultado += f"/{fecha_vuelta}"
            resultado += f"/{num_adultos}adults"
            if num_ninos > 0:
                resultado += f"/{num_ninos}children"
            resultado += "\n"
            
            return resultado
        
        else:
            # FALLBACK: DATOS SIMULADOS
            resultado = f"‚úàÔ∏è VUELOS SIMULADOS - {tipo_viaje.upper()}\n"
            resultado += f"üìç {origen} ({origen_iata}) ‚Üí {destino} ({destino_iata})\n"
            resultado += f"üìÖ Ida: {fecha_ida}"
            if fecha_vuelta:
                resultado += f" | Vuelta: {fecha_vuelta}"
            resultado += f"\nüë• Viajeros: {num_viajeros} persona(s)\n\n"
            resultado += "‚ö†Ô∏è Usando datos simulados (configura AMADEUS_API_KEY para precios reales)\n\n"
            
            # Aerol√≠neas simuladas
            aerolineas = [
                {"nombre": "LATAM Airlines", "codigo": "LA"},
                {"nombre": "Avianca", "codigo": "AV"},
                {"nombre": "Copa Airlines", "codigo": "CM"},
                {"nombre": "Iberia", "codigo": "IB"},
                {"nombre": "American Airlines", "codigo": "AA"},
                {"nombre": "Air Europa", "codigo": "UX"}
            ]
            
            # Calcular precio base seg√∫n distancia estimada (simulado)
            rutas_populares = {
                ("LIM", "CUZ"): 150, ("LIM", "MAD"): 800,
                ("MAD", "BCN"): 120, ("BUE", "GIG"): 350,
                ("MIA", "LIM"): 600, ("BOG", "CTG"): 180,
            }
            
            # Buscar precio base
            ruta = (origen_iata, destino_iata)
            ruta_inversa = (destino_iata, origen_iata)
            precio_base = rutas_populares.get(ruta) or rutas_populares.get(ruta_inversa) or 500
            
            # Generar opciones de vuelos
            multiplicador = 2 if fecha_vuelta else 1
            
            # Generar 3 opciones
            for i, aerolinea in enumerate(random.sample(aerolineas, min(3, len(aerolineas)))):
                variacion = random.uniform(0.85, 1.25)
                precio_adulto = int(precio_base * variacion * multiplicador)
                precio_nino = int(precio_adulto * 0.75)
                precio_bebe = int(precio_adulto * 0.15)
                
                # Calcular total
                total = (precio_adulto * num_adultos +
                        precio_nino * num_ninos +
                        precio_bebe * num_bebes)
                
                if total == 0:  # Si no hay viajeros registrados
                    total = precio_adulto
                
                hora_salida = random.choice(["06:30", "10:15", "14:45", "18:30", "22:00"])
                duracion = random.choice(["2h 30m", "3h 15m", "5h 45m", "8h 20m"])
                
                resultado += f"üõ´ Opci√≥n {i+1}: {aerolinea['nombre']} ({aerolinea['codigo']})\n"
                resultado += f"   ‚è∞ Salida: {hora_salida} | Duraci√≥n: {duracion}\n"
                resultado += f"   üí∞ Precio por adulto: ${precio_adulto} USD\n"
                if num_ninos > 0:
                    resultado += f"   üë∂ Ni√±os: ${precio_nino} USD/ni√±o\n"
                if num_bebes > 0:
                    resultado += f"   üçº Beb√©s: ${precio_bebe} USD/beb√©\n"
                resultado += f"   üíµ TOTAL: ${total} USD\n\n"
            
            # Agregar links de compra
            resultado += "üîó ENLACES PARA COMPRAR:\n"
            resultado += f"üåê Google Flights: https://www.google.com/flights?hl=es#flt={origen_iata}.{destino_iata}.{fecha_ida}"
            if fecha_vuelta:
                resultado += f"*{destino_iata}.{origen_iata}.{fecha_vuelta}"
            resultado += f";c:EUR;e:1;sd:1;t:f\n"
            
            resultado += f"üåê Skyscanner: https://www.skyscanner.com/transport/flights/{origen_iata}/{destino_iata}/{fecha_ida.replace('-', '')}"
            if fecha_vuelta:
                resultado += f"/{fecha_vuelta.replace('-', '')}"
            resultado += f"/?adultsv1={num_adultos}"
            if num_ninos > 0:
                resultado += f"&childrenv1={num_ninos}"
            resultado += "\n"
            
            resultado += f"üåê Kayak: https://www.kayak.com/flights/{origen_iata}-{destino_iata}/{fecha_ida}"
            if fecha_vuelta:
                resultado += f"/{fecha_vuelta}"
            resultado += f"/{num_adultos}adults"
            if num_ninos > 0:
                resultado += f"/{num_ninos}children"
            resultado += "\n"
            
            return resultado
    
    except Exception as e:
        return f"‚ùå Error al buscar vuelos: {str(e)}"

# ============================================================================
# HERRAMIENTA 3: INFORMACI√ìN DEL DESTINO
# ============================================================================

class DestinoInput(BaseModel):
    """Input para informaci√≥n del destino"""
    ciudad: str = Field(description="Ciudad o lugar tur√≠stico")
    idioma: str = Field(default="es", description="Idioma del resumen (es, en)")

@tool("info_destino", args_schema=DestinoInput)
def info_destino(ciudad: str, idioma: str = "es") -> str:
    """
    Obtiene informaci√≥n completa de un destino usando Wikipedia y datos geogr√°ficos.
    Incluye descripci√≥n, atracciones principales y datos relevantes.
    """
    try:
        from urllib.parse import quote
        resultado = ""
        
        # 1. Obtener descripci√≥n de Wikipedia (PRIORITARIO)
        # Codificar la ciudad para URL (maneja acentos y espacios)
        ciudad_encoded = quote(ciudad)
        wiki_url = f"https://{idioma}.wikipedia.org/api/rest_v1/page/summary/{ciudad_encoded}"
        
        headers = {
            "User-Agent": "TravelProAI/3.0 (Educational project)",
            "Accept": "application/json"
        }
        
        wiki_response = requests.get(wiki_url, headers=headers, timeout=10)
        
        if wiki_response.status_code == 200:
            wiki_data = wiki_response.json()
            titulo = wiki_data.get('title', ciudad)
            descripcion = wiki_data.get('extract', '')
            
            # Verificar que sea un destino tur√≠stico (no un personaje o concepto)
            # Si la descripci√≥n es muy corta o menciona mitolog√≠a, buscar con "ciudad de X"
            if len(descripcion) < 100 or 'mitolog' in descripcion.lower():
                # Intentar con "ciudad de X" o usando b√∫squeda
                search_url = f"https://{idioma}.wikipedia.org/w/api.php"
                search_params = {
                    "action": "query",
                    "format": "json",
                    "list": "search",
                    "srsearch": f"{ciudad} ciudad",
                    "srlimit": 1
                }
                search_resp = requests.get(search_url, headers=headers, params=search_params, timeout=10)
                if search_resp.status_code == 200:
                    search_data = search_resp.json()
                    if search_data.get('query', {}).get('search'):
                        titulo_real = search_data['query']['search'][0]['title']
                        # Volver a buscar con el t√≠tulo correcto
                        wiki_url_real = f"https://{idioma}.wikipedia.org/api/rest_v1/page/summary/{quote(titulo_real)}"
                        wiki_resp_real = requests.get(wiki_url_real, headers=headers, timeout=10)
                        if wiki_resp_real.status_code == 200:
                            wiki_data = wiki_resp_real.json()
                            titulo = wiki_data.get('title', ciudad)
                            descripcion = wiki_data.get('extract', '')
            
            # Limitar descripci√≥n para ahorrar tokens pero mantener info √∫til (500 caracteres)
            if len(descripcion) > 500:
                descripcion = descripcion[:500] + "..."
            
            if descripcion:
                resultado += f"üìç {titulo}\n\n"
                resultado += f"‚ÑπÔ∏è {descripcion}\n\n"
        
        # 2. Obtener datos geogr√°ficos adicionales
        clima_url = f"https://geocoding-api.open-meteo.com/v1/search?name={ciudad}&count=1&language=es"
        geo_response = requests.get(clima_url, timeout=10)
        
        if geo_response.status_code == 200:
            geo_data = geo_response.json()
            if geo_data.get('results'):
                resultado_geo = geo_data['results'][0]
                pais = resultado_geo.get('country', '')
                poblacion = resultado_geo.get('population', 0)
                lat = resultado_geo.get('latitude', 0)
                
                # Determinar clima general por latitud
                clima = "tropical" if abs(lat) < 23.5 else "templado" if abs(lat) < 66.5 else "fr√≠o"
                
                resultado += f"üìä DATOS CLAVE:\n"
                resultado += f"üåç Pa√≠s: {pais}\n"
                if poblacion > 0:
                    resultado += f"üë• Poblaci√≥n: {poblacion:,}\n"
                resultado += f"üå°Ô∏è Clima general: {clima}\n"
        
        if not resultado:
            return f"‚ùå No se encontr√≥ informaci√≥n de {ciudad}. Intenta con el nombre en espa√±ol o ingl√©s."
        
        return resultado
    
    except Exception as e:
        return f"‚ùå Error al consultar {ciudad}: {str(e)}"

# ============================================================================
# HERRAMIENTA 4: RECOMENDACIONES POR TEMPORADA
# ============================================================================

class TemporadaInput(BaseModel):
    """Input para recomendaciones de temporada"""
    destino: str = Field(description="Destino tur√≠stico")
    mes: str = Field(description="Mes del viaje (ej: 'Enero', 'Julio')")

@tool("recomendaciones_temporada", args_schema=TemporadaInput)
def recomendaciones_temporada(destino: str, mes: str) -> str:
    """
    Genera recomendaciones de actividades seg√∫n la temporada del a√±o.
    Considera el clima y eventos t√≠picos del destino.
    """
    try:
        meses_verano_norte = ["junio", "julio", "agosto"]
        meses_invierno_norte = ["diciembre", "enero", "febrero"]
        
        mes_lower = mes.lower()
        
        # Consultar clima actual
        clima_url = f"https://geocoding-api.open-meteo.com/v1/search?name={destino}&count=1&language=es"
        geo_response = requests.get(clima_url, timeout=10)
        
        hemisferio = "norte"  # Por defecto
        if geo_response.status_code == 200:
            geo_data = geo_response.json()
            if geo_data.get('results'):
                lat = geo_data['results'][0].get('latitude', 0)
                hemisferio = "sur" if lat < 0 else "norte"
        
        # Determinar temporada
        if hemisferio == "norte":
            es_verano = mes_lower in meses_verano_norte
            es_invierno = mes_lower in meses_invierno_norte
        else:
            es_verano = mes_lower in meses_invierno_norte
            es_invierno = mes_lower in meses_verano_norte
        
        resultado = f"üóìÔ∏è Recomendaciones para {destino} en {mes.capitalize()}\n"
        resultado += f"üåê Hemisferio: {hemisferio.capitalize()}\n\n"
        
        if es_verano:
            resultado += "‚òÄÔ∏è TEMPORADA: VERANO\n"
            resultado += "Actividades recomendadas:\n"
            resultado += "üèñÔ∏è Playas y deportes acu√°ticos\n"
            resultado += "üö∂ Tours a pie y senderismo\n"
            resultado += "üçπ Terrazas y actividades al aire libre\n"
            resultado += "üì∏ Fotograf√≠a paisaj√≠stica\n"
            resultado += "üé™ Festivales y eventos culturales\n"
            resultado += "\nüí° Consejos: Protector solar, ropa ligera, hidrataci√≥n"
        
        elif es_invierno:
            resultado += "‚ùÑÔ∏è TEMPORADA: INVIERNO\n"
            resultado += "Actividades recomendadas:\n"
            resultado += "üèõÔ∏è Museos y sitios hist√≥ricos\n"
            resultado += "üçΩÔ∏è Gastronom√≠a local\n"
            resultado += "üé≠ Teatro y eventos culturales\n"
            resultado += "üõçÔ∏è Compras y mercados locales\n"
            resultado += "‚òï Caf√©s y experiencias gastron√≥micas\n"
            resultado += "\nüí° Consejos: Ropa abrigada, planificar horarios, reservas previas"
        
        else:
            resultado += "üå∏ TEMPORADA: PRIMAVERA/OTO√ëO\n"
            resultado += "Actividades recomendadas:\n"
            resultado += "üå≥ Parques y jardines\n"
            resultado += "üö¥ Ciclismo y actividades moderadas\n"
            resultado += "üé® Eventos culturales\n"
            resultado += "üìö Tours hist√≥ricos y culturales\n"
            resultado += "üç∑ Experiencias gastron√≥micas\n"
            resultado += "\nüí° Consejos: Ropa en capas, clima variable"
        
        return resultado
    
    except Exception as e:
        return f"‚ùå Error al generar recomendaciones: {str(e)}"

# ============================================================================
# HERRAMIENTA 5: GENERADOR DE ITINERARIO
# ============================================================================

class ItinerarioInput(BaseModel):
    """Input para generar itinerario"""
    destino: str = Field(description="Destino del viaje")
    dias: int = Field(description="N√∫mero de d√≠as del viaje")
    presupuesto: str = Field(description="Nivel de presupuesto: 'bajo', 'medio', 'alto'")

@tool("generar_itinerario", args_schema=ItinerarioInput)
def generar_itinerario(destino: str, dias: int, presupuesto: str = "medio") -> str:
    """
    Genera un itinerario d√≠a a d√≠a con actividades y estimaci√≥n de gastos.
    Adaptado al presupuesto especificado.
    """
    try:
        actividades_por_presupuesto = {
            "bajo": {
                "actividades": ["Tours gratuitos", "Mercados locales", "Parques p√∫blicos", "Museos gratis", "Caminatas"],
                "comida_dia": 25,
                "actividad_dia": 15,
                "transporte_dia": 10
            },
            "medio": {
                "actividades": ["Tours guiados", "Museos", "Restaurantes locales", "Actividades culturales", "Compras"],
                "comida_dia": 50,
                "actividad_dia": 40,
                "transporte_dia": 20
            },
            "alto": {
                "actividades": ["Tours premium", "Experiencias exclusivas", "Fine dining", "Spa", "Tours privados"],
                "comida_dia": 120,
                "actividad_dia": 100,
                "transporte_dia": 40
            }
        }
        
        config = actividades_por_presupuesto.get(presupuesto.lower(), actividades_por_presupuesto["medio"])
        
        resultado = f"üìÖ ITINERARIO DE {dias} D√çAS EN {destino.upper()}\n"
        resultado += f"üí∞ Presupuesto: {presupuesto.capitalize()}\n"
        resultado += f"üë• Viajeros: {len(viajeros_db.viajeros) or 1}\n\n"
        
        total_gasto = 0
        
        for dia in range(1, dias + 1):
            resultado += f"üìÜ D√çA {dia}:\n"
            
            if dia == 1:
                resultado += "   üõ¨ Llegada y check-in\n"
                actividad1 = random.choice(["Paseo por el centro hist√≥rico", "Tour de orientaci√≥n", "Cena de bienvenida"])
                resultado += f"   üèÉ {actividad1}\n"
            elif dia == dias:
                resultado += "   üß≥ Check-out\n"
                actividad1 = random.choice(["√öltimas compras", "Paseo de despedida", "Visita r√°pida"])
                resultado += f"   üèÉ {actividad1}\n"
                resultado += "   üõ´ Regreso\n"
            else:
                actividad1 = random.choice(config["actividades"])
                actividad2 = random.choice(config["actividades"])
                resultado += f"   ‚òÄÔ∏è Ma√±ana: {actividad1}\n"
                resultado += f"   üåÜ Tarde: {actividad2}\n"
            
            gasto_dia = config["comida_dia"] + config["actividad_dia"] + config["transporte_dia"]
            total_gasto += gasto_dia
            resultado += f"   üíµ Gasto estimado: ${gasto_dia} USD/persona\n\n"
        
        num_personas = len(viajeros_db.viajeros) or 1
        total_viaje = total_gasto * num_personas
        
        resultado += f"üí∞ RESUMEN FINANCIERO:\n"
        resultado += f"   Por persona: ${total_gasto} USD\n"
        resultado += f"   Total grupo ({num_personas} persona(s)): ${total_viaje} USD\n"
        resultado += f"\nüìù Nota: Precios aproximados, no incluyen vuelos ni alojamiento\n"
        
        return resultado
    
    except Exception as e:
        return f"‚ùå Error al generar itinerario: {str(e)}"

# ============================================================================
# HERRAMIENTA 6: CALCULADORA DE PRESUPUESTO
# ============================================================================

class PresupuestoInput(BaseModel):
    """Input para calcular presupuesto"""
    dias: int = Field(description="N√∫mero de d√≠as")
    destino: str = Field(description="Destino del viaje")
    nivel: str = Field(default="medio", description="Nivel: 'economico', 'medio', 'lujo'")

@tool("calcular_presupuesto", args_schema=PresupuestoInput)
def calcular_presupuesto(dias: int, destino: str, nivel: str = "medio") -> str:
    """
    Calcula el presupuesto total estimado para el viaje.
    Incluye: vuelos, alojamiento, comida, actividades, transporte.
    """
    try:
        # Costos por nivel y por d√≠a
        costos = {
            "economico": {
                "vuelo": 400,
                "hotel_noche": 40,
                "comida_dia": 25,
                "actividades_dia": 15,
                "transporte_dia": 10,
                "otros_dia": 10
            },
            "medio": {
                "vuelo": 700,
                "hotel_noche": 80,
                "comida_dia": 50,
                "actividades_dia": 40,
                "transporte_dia": 20,
                "otros_dia": 20
            },
            "lujo": {
                "vuelo": 1500,
                "hotel_noche": 200,
                "comida_dia": 120,
                "actividades_dia": 100,
                "transporte_dia": 40,
                "otros_dia": 50
            }
        }
        
        config = costos.get(nivel.lower(), costos["medio"])
        num_personas = len(viajeros_db.viajeros) or 1
        conteo = viajeros_db.contar_por_tipo()
        
        # Calcular costos
        vuelos = config["vuelo"] * num_personas
        # Descuentos para ni√±os
        if conteo.get("ni√±o", 0) > 0:
            vuelos -= config["vuelo"] * 0.25 * conteo["ni√±o"]
        if conteo.get("beb√©", 0) > 0:
            vuelos -= config["vuelo"] * 0.85 * conteo["beb√©"]
        
        alojamiento = config["hotel_noche"] * dias
        comida = config["comida_dia"] * dias * num_personas
        actividades = config["actividades_dia"] * dias * num_personas
        transporte = config["transporte_dia"] * dias * num_personas
        otros = config["otros_dia"] * dias * num_personas
        
        total = vuelos + alojamiento + comida + actividades + transporte + otros
        
        resultado = f"üí∞ PRESUPUESTO ESTIMADO - {destino.upper()}\n"
        resultado += f"üìä Nivel: {nivel.capitalize()}\n"
        resultado += f"üìÖ Duraci√≥n: {dias} d√≠as\n"
        resultado += f"üë• Viajeros: {num_personas} persona(s)\n\n"
        
        resultado += "üìã DESGLOSE:\n"
        resultado += f"‚úàÔ∏è  Vuelos (ida y vuelta): ${int(vuelos)} USD\n"
        resultado += f"üè® Alojamiento ({dias} noches): ${int(alojamiento)} USD\n"
        resultado += f"üçΩÔ∏è  Comidas: ${int(comida)} USD\n"
        resultado += f"üé≠ Actividades: ${int(actividades)} USD\n"
        resultado += f"üöï Transporte local: ${int(transporte)} USD\n"
        resultado += f"üõçÔ∏è  Otros gastos: ${int(otros)} USD\n"
        resultado += f"\n{'='*40}\n"
        resultado += f"üíµ TOTAL: ${int(total)} USD\n"
        resultado += f"üí≥ Por persona: ${int(total/num_personas)} USD\n"
        
        return resultado
    
    except Exception as e:
        return f"‚ùå Error al calcular presupuesto: {str(e)}"

# ============================================================================
# CONFIGURACI√ìN DEL AGENTE
# ============================================================================

def crear_agente_vacaciones():
    """Crea y configura el agente de planificaci√≥n de vacaciones"""
    
    # Configuraci√≥n de API
    openai_key = os.getenv("OPENAI_API_KEY")
    model_name = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
    temperature = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))
    
    if not openai_key:
        raise ValueError("‚ùå No se encontr√≥ OPENAI_API_KEY. Verifica tu archivo .env")
    
    llm = ChatOpenAI(
        model=model_name,
        temperature=temperature,
        api_key=openai_key
    )
    
    # Sistema de memoria
    memory = MemorySaver()
    
    # Prompt del sistema
    system_prompt = """Eres Travel Pro AI, un agente experto en planificaci√≥n de vacaciones con un proceso conversacional estructurado.

üéØ FLUJO DE CONVERSACI√ìN (SIGUE ESTE ORDEN):

PASO 1: CONOCER A LOS VIAJEROS
- Pregunta por nombres y edades de TODOS los viajeros
- Usa gestionar_viajeros para registrarlos
- Confirma el registro

PASO 2: DESTINO Y DURACI√ìN
- Pregunta: ¬øA d√≥nde quieren ir?
- Pregunta: ¬øPor cu√°ntos d√≠as?
- Pregunta: ¬øDesde qu√© ciudad viajan?
- Usa info_destino para dar informaci√≥n breve del destino

PASO 3: OCASI√ìN ESPECIAL
- Pregunta si el viaje es para algo especial (luna de miel, aniversario, vacaciones familiares, etc.)
- Esto ayuda a personalizar las recomendaciones

PASO 4: ITINERARIO PERSONALIZADO
- Pregunta el nivel de presupuesto (econ√≥mico, medio, lujo)
- Usa recomendaciones_temporada para actividades seg√∫n √©poca
- Usa generar_itinerario con la info recopilada
- Muestra el itinerario d√≠a a d√≠a

PASO 5: FECHAS DE VIAJE
- AHORA pregunta las fechas espec√≠ficas (formato: YYYY-MM-DD)
- Explica que necesitas fechas concretas para buscar vuelos

PASO 6: B√öSQUEDA DE VUELOS
- Usa buscar_vuelos con toda la informaci√≥n
- Los links se generan autom√°ticamente
- Muestra opciones y presupuesto total

üìã REGLAS IMPORTANTES:
1. NO SALTES PASOS - Sigue el orden
2. UNA PREGUNTA A LA VEZ - No abrumes al usuario
3. S√â CONVERSACIONAL - Amigable pero conciso
4. USA LAS HERRAMIENTAS - No inventes informaci√≥n
5. CONFIRMA ANTES DE CONTINUAR - Aseg√∫rate de tener la info correcta

üí¨ ESTILO DE COMUNICACI√ìN:
- Respuestas cortas (3-5 l√≠neas m√°ximo antes de usar herramientas)
- Emojis para hacer m√°s amigable
- Preguntas claras y directas
- Si falta informaci√≥n, p√≠dela espec√≠ficamente

‚ö†Ô∏è IMPORTANTE:
- Si el usuario da toda la info de una vez, sigue igual el flujo pero m√°s r√°pido
- Siempre usa info_destino ANTES de generar itinerario
- Busca vuelos AL FINAL, despu√©s del itinerario
- Los links de vuelos se generan AUTOM√ÅTICAMENTE

Ejemplo de inicio ideal:
Usuario: "Quiero planear vacaciones"
T√∫: "¬°Genial! üå¥ Primero, cu√©ntame: ¬øQui√©nes viajan? Dame nombres y edades de cada persona."

¬°Crea experiencias de viaje inolvidables! ‚úàÔ∏è"""

    # Herramientas disponibles
    tools = [
        gestionar_viajeros,
        buscar_vuelos,
        info_destino,
        recomendaciones_temporada,
        generar_itinerario,
        calcular_presupuesto
    ]
    
    # Crear agente
    agente = create_react_agent(
        model=llm,
        tools=tools,
        checkpointer=memory,
        state_modifier=SystemMessage(content=system_prompt)
    )
    
    return agente


